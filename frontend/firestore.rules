rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is admin of the same building
    function isAdminOfBuilding(buildingId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.role == 'admin' && userDoc.data.buildingId == buildingId;
    }

    // Helper function to check if user is in the same building
    function isInSameBuilding(buildingId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.buildingId == buildingId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read their own document
      // Allow admins to read any user document in their building
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        isAdminOfBuilding(resource.data.buildingId)
      );

      // Allow users to create their own user document (e.g., on signup).
      // The role must be 'tenant' by default to prevent self-promotion to admin.
      allow create: if request.auth.uid == userId && request.resource.data.role == 'tenant';

      // Allow a user to update their own document, but NOT their role.
      // Allow admins to update any user document in their building, including role changes
      allow update: if request.auth != null && (
        (request.auth.uid == userId && request.resource.data.role == resource.data.role) ||
        isAdminOfBuilding(resource.data.buildingId)
      );

      // Allow admins to delete user documents in their building
      allow delete: if request.auth != null && isAdminOfBuilding(resource.data.buildingId);
    }

    // Rules for the 'buildings' collection
    match /buildings/{buildingId} {
      // Any authenticated user can read building information
      allow read: if request.auth != null;
      
      // Only admins can write to buildings
      allow write: if request.auth != null && isAdminOfBuilding(buildingId);
    }

    // Rules for the 'payments' collection
    match /payments/{paymentId} {
      // Allow users to read their own payments
      // Allow admins to read payments from users in their building
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        isAdminOfBuilding(resource.data.buildingId)
      );

      // Allow a user to create a payment record only for themselves.
      // Allow admins to create payment records for users in their building
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        isAdminOfBuilding(request.resource.data.buildingId)
      );

      // Allow admins to update payment records for users in their building
      // Regular users cannot update their own payments (maintains audit trail)
      allow update: if request.auth != null && isAdminOfBuilding(resource.data.buildingId);

      // Allow admins to delete payment records for users in their building
      allow delete: if request.auth != null && isAdminOfBuilding(resource.data.buildingId);
    }
  }
}
